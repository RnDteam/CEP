import blur.model.Account;
import blur.model.AccountStatus;
import com.ibm.ia.engine.runtime.PartialMoment;
import com.ibm.rules.engine.ruledef.runtime.Rule;
import com.ibm.rules.engine.runtime.RunningEngineWithWorkingMemory;
import java.lang.Double;
import java.lang.Object;
public signature EngineDataClass extends com.ibm.rules.engine.runtime.impl.AbstractEngineData {
  public in java.lang.Iterable entities = null;
  public in out com.ibm.ia.model.Entity entity = null;
  public in out Object globalQueryResult = null;
  public in out Object localQueryResult = null;
  public in java.time.ZonedDateTime now = null;
  public in java.lang.String partitionIndex = null;
}

ruleset IlrContext (EngineDataClass){
  
  rule `Average Risky Account Balance` {
    packageExecutionName = ""
    ruleExecutionName = "Average_Risky_Account_Balance"
    ruleExecutionShortName = "Average_Risky_Account_Balance"
    when {
      aggregateVariable:aggregate {
        collect_class_1 : Account(collect_class_1.status.equals(AccountStatus.Risky)) in entities;
      }
      do {
        PartialMoment(partitionIndex){Double.valueOf(((double)collect_class_1.balance)).doubleValue()};
      }
    }
    then {
      localQueryResult = aggregateVariable;
    }
  }
  
  rule globalQuery {
    packageExecutionName = ""
    ruleExecutionName = "globalQuery"
    ruleExecutionShortName = "globalQuery"
    when {
      aggregateVariable:aggregate {
        partialMoment : PartialMoment();
      }
      do {
        PartialMoment(null){partialMoment.getNumber(), partialMoment.getSum()};
      }
    }
    then {
      globalQueryResult = aggregateVariable;
    }
  }
}
